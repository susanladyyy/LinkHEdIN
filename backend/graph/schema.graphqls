# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Industry {
  id : ID!
  industryname : String!
}

type Employmenttype {
  id : ID!
  employmenttypename : String!
}

type Experience {
  id : ID!
  userid : Float!
  title : String!
  employmentypeid : Float!
  companyname : String!
  location : String!
  startdate : String!
  enddate : String
  description : String
  industry : String!
}

type Degree {
  id : ID!
  degreename : String!
}

type School {
  id : ID!
  schoolname : String!
}

type Studyfield {
  id : ID!
  fieldname : String!
}

type Education {
  id : ID!
  grade : Float
  activities : String
  description : String
  schoolname : String!
  degreeid : Float!
  fieldofstudy : String!
  startdate : String!
  enddate : String
  userid : Float!
}

type Pronoun {
  id : ID!
  pronounsname : String!
}

type Country {
  id : ID!
  countryname : String!
}

type City {
  id : ID!
  countryid : Float!
  cityname : String!
}

type Location {
  id : ID!
  countryid : Float!
  cityid : Float!
}

type User {
  id : ID!
  pronounsid : Float
  firstname : String!
  lastname : String!
  additionalname : String
  headline : String!
  password : String!
  profile : String
  banner : String
  profileurl : String!
  email : String!
  activation : Boolean!
  about : String!
  locationid : Float
  theme : Float!
  display : String
}

type Userconnection {
  id : ID!
  userid : Float!
  useridconnect : Float!
  status : Boolean!
}

type Userfollower {
  id : ID!
  userid : Float!
  useridfollower : Float!
}

type Userfollowing {
  id : ID!
  userid : Float!
  useridfollowed : Float!
}

type Job {
  id : ID!
  name : String!
  company : String!
  location : String!
  userid : Float!
}

type Notification {
  id : ID!
  userid : Float!
  desc : String!
  date : String!
}

type Profileview {
  id : ID!
  useridviewed : Float!
  deletestatus : Boolean!
}

type Post {
  id : ID!
  userid : Float!
  media : String
  caption : String!
  display : String
}

type Like {
  id : ID!
  userid : Float!
  postid : Float!
}

type Comment {
  id : ID!
  userid : Float!
  postid : Float!
  comment : String!
}

type Commentlike {
  id : ID!
  commentid : Float!
  userid : Float!
}

type Userblock {
  id : ID!
  userid : Float!
  useridblocked : Float!
}

type Commentreply {
  id : ID!
  commentid : Float!
  userid : Float!
  commentreply : String!
}

type Commentreplylike {
  id : ID!
  userid : Float!
  commentreplyid : Float!
}

type Message {
  id : ID!
  useridsend : Float!
  useridreceive : Float!
}

type Usermessage {
  id : ID!
  useridsend : Float!
  useridreceive : Float!
  message : String!
}

type Query {
  countries: [Country!]!
  cities: [City!]!
  pronouns: [Pronoun!]!
  industries: [Industry!]!
  employmenttypes: [Employmenttype!]!
  degrees: [Degree!]!
  schools: [School!]!
  studyfields: [Studyfield!]!
  users (email: String, password: String, url: String, name: String): [User!]!
  temporaries (url: String) : [Temporary!]!
  userconnections (id: Float!, status: Boolean) : [Userconnection!]!
  userinvitations (id: Float!, status: Boolean) : [Userconnection!]!
  userfollowing (id: Float!) : [Userfollowing!]!
  userfollower (id: Float!) : [Userfollower!]!
  jobs (userid: ID): [Job!]!
  notifications: [Notification!]!
  profileviews (id: Float!): [Profileview!]!
  educations (id: Float!) : [Education!]!
  experiences (id: Float!) : [Experience!]!
  posts (title: String): [Post!]!
  comments: [Comment!]!
  likes: [Like!]!
  commentlikes: [Commentlike!]!
  userblocks (id: Float, blocked: Float): [Userblock!]!
  commentreplies: [Commentreply!]!
  commentreplylikes: [Commentreplylike!]!
  messages: [Message!]!
  usermessages: [Usermessage!]!
}

type Temporary {
  id : ID!
  email : String!
  password : String!
  url : String!
}

input NewUser {
  firstname : String!
  lastname : String!
  password : String!
  profileurl : String!
  email : String!
  activation : Boolean!
  theme : Float!
  display : String!
}

input NewTemporary {
  email : String!
  password : String!
  url : String!
}

input DeleteTemporary {
  url : String!
}

input NewPass {
  id : ID!
  password : String!
}

input NewJob {
  name : String!
  company : String!
  location : String!
  userid : Float!
}

input UpdateConnect {
  userid : Float!
  useridconnect : Float!
  status : Boolean!
}

input NewConnect {
  userid : Float!
  useridconnect : Float!
  status : Boolean!
}

input DelConnect {
  userid : Float!
  useridconnect : Float!
}

input NewNotification {
  userid : Float!
  desc : String!
  date : String!
}

input NewFollower {
  userid : Float!
  useridfollower : Float!
}

input NewFollowing {
  userid : Float!
  useridfollowed : Float!
}

input NewView {
  useridviewed : Float!
}

input NewEducation {
  grade : Float
  activities : String
  description : String
  schoolname : String!
  degreeid : Float!
  fieldofstudy : String!
  startdate : String!
  enddate : String
  userid : Float!
}

input NewExperience {
  userid : Float!
  title : String!
  employmentypeid : Float!
  companyname : String!
  location : String!
  startdate : String!
  enddate : String
  description : String
  industry : String!
}

input EditProfile {
  id : ID!
  firstname : String!
  lastname : String!
  headline : String
  about : String
  profile : String
  banner : String
}

input NewPost {
  userid : Float!
  media : String
  caption : String!
  display : String!
}

input NewComment {
  userid : Float!
  postid : Float!
  comment : String
}

input NewLike {
  userid : Float!
  postid : Float!
}

input NewCommentLike {
  commentid : Float!
  userid : Float!
}

input NewUserBlock {
  userid : Float!
  useridblocked : Float!
}

input NewCommentReply {
  commentid : Float!
  userid : Float!
  commentreply : String!
}

input NewCommentReplyLike {
  userid : Float!
  commentreplyid : Float!
}

input UpdateTheme {
  id : ID!
  theme : Float!
}

input NewUserMessage {
  useridsend : Float!
  useridreceive : Float!
}

input NewUserMessageBubble {
  useridsend : Float!
  useridreceive : Float!
  message : String!
}

type Mutation {
  updatePassword(input: NewPass!) : User!
  createUser(input: NewUser!): User!
  createTemporary(input: NewTemporary!): Temporary!
  deleteTemporary(input: DeleteTemporary!) : Boolean!
  createJob(input: NewJob!) : Job!
  updateConnect(input: UpdateConnect!): Userconnection!
  createConnect(input: NewConnect!): Userconnection!
  deleteConnect(input: DelConnect!) : Boolean!
  createNotification(input: NewNotification!) : Notification!
  createFollower(input: NewFollower!) : Userfollower!
  createFollowing(input: NewFollowing!) : Userfollowing!
  deleteFollower(input: NewFollower!) : Boolean!
  deleteFollowing(input: NewFollowing!) : Boolean!
  createView(input: NewView!) : Profileview!
  deleteView(status: Boolean!): Boolean!
  createEducation(input: NewEducation!) : Education!
  createExperience(input: NewExperience!) : Experience!
  updateProfile(input: EditProfile!) : User!
  deleteEducation(id: ID!) : Boolean!
  deleteExperience(id: ID!) : Boolean!
  createPost(input: NewPost!) : Post!
  createComment(input: NewComment) : Comment!
  createLike(input: NewLike) : Like!
  deleteLike(id: ID!, userid: ID!) : Boolean!
  deleteComment(id: ID!) : Boolean!
  createCommentLike(input: NewCommentLike!) : Commentlike!
  deleteCommentLike(commentid: Float!, userid: Float!) : Boolean!
  createBlock(input: NewUserBlock!) : Userblock!
  deleteBlock(input: NewUserBlock!) : Boolean!
  createCommentReply(input: NewCommentReply!) : Commentreply!
  deleteCommentReply(id: ID!): Boolean!
  createCommentReplyLike(input: NewCommentReplyLike) : Commentreplylike!
  deleteCommentReplyLike(userid: Float!, commentreplyid: Float!) : Boolean!
  updateTheme(input: UpdateTheme!) : User!
  createUserMessage(input: NewUserMessage!) : Message!
  createUserMessageBubble(input: NewUserMessageBubble) : Usermessage!
}